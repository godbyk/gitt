# Location of build dir
BUILD_DIR=build

BUILD_DIR_IMAGES=$(BUILD_DIR)/images/chaps

# Location of website files
SITE_DIR=site

# Location of website images
SITE_IMAGES_DIR=$(SITE_DIR)/images

SITE_CHAP_IMAGES_DIR=$(SITE_IMAGES_DIR)/chaps

SITE_STYLE_DIR=$(SITE_DIR)/style

# List of targets that are not files
.PHONY: all quick clean web print pdf screen quickpdf cleantmp cleanpdf cleanimages html htmlimages cleansite

all: pdf cleantmp
quick: quickpdf cleantmp
clean: cleantmp cleanpdf
web: images html

# Generate a print version PDF (for lulu.com)
print:
	@cd src; \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{print}\input{gitt}' && \
	makeindex gitt && \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{print}\input{gitt}' && \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{print}\input{gitt}'
	@mv src/gitt.pdf "Git in the Trenches - print edition.pdf"
	$(color_tex) src/gitt.log

# Generate the PDF (on-screen version)
pdf:
	@cd src; \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{screen}\input{gitt}' && \
	makeindex gitt && \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{screen}\input{gitt}' && \
	xelatex --output-driver="xdvipdfmx -V 5" '\def\mediaformat{screen}\input{gitt}'
	@mv src/gitt.pdf "Git in the Trenches.pdf"
	$(color_tex) src/gitt.log

# An alias for generated the PDF
screen: pdf

# Quickly update the PDF. Will not update the index or cross-references
quickpdf:
	@cd src; \
	xelatex --output-driver="xdvipdfmx -V 5" --interaction nonstopmode gitt

# Remove the temporary files generated by LaTeX
cleantmp:
	@cd src; \
	rm -f *.aux *.log *.out *.toc *.idx *.ind *.ilg

# Remove the generated PDF
cleanpdf:
	@cd src; \
	rm -f gitt.pdf

# Remove the generated website images
cleanimages:
	@rm -f $(SITE_IMAGES_DIR)/*.png

# Clean up generated site files
cleansite:
	@rm -fr $(SITE_DIR)
	@rm html/nav.html

cleanbuild:
	@rm -fr $(BUILD_DIR)

site: html htmlimages

baseconvert: $(BUILD_DIR) $(BUILD_DIR_IMAGES) htmlimages
	@python scripts/htmlbuild.py alltex
	@python scripts/htmlbuild.py baseconvert
	@python scripts/htmlbuild.py baseconcat
	@cp -r site/images $(BUILD_DIR)

epub: baseconvert
	@ebook-convert build/complete.html build/complete.epub --chapter '//*[name()="h1"]' 

epub-view: epub
	@ebook-viewer build/complete.epub

mobi: baseconvert
	@ebook-convert build/complete.html build/complete.mobi --chapter '//*[name()="h1"]' 

mobi-view: mobi
	@ebook-viewer build/complete.mobi

# Convert TeX to HTML
html: $(SITE_IMAGES_DIR)
	@touch html/nav.html
	@cp html/stylesheet.css $(SITE_DIR)/
	@cp html/index.html $(SITE_DIR)/
	@python scripts/htmlbuild.py simple index
	@python scripts/htmlbuild.py simple feedback
	@python scripts/htmlbuild.py alltex
	@python scripts/htmlbuild.py allchaps
	@python scripts/htmlbuild.py allafterhours
	@python scripts/htmlbuild.py intro
	@python scripts/htmlbuild.py setup

# Get a list of all SVG images
IMAGES=$(shell ls images/source/*.svg)

# Generate list of images required for the website
SITEIMAGES=$(shell for IMAGE in $(IMAGES); do echo "$$(basename $${IMAGE} .svg).png"; done)

# Generate PNG file from SVG file
%.png: images/source/%.svg $(SITE_IMAGES_DIR) $(SITE_CHAP_IMAGES_DIR)
	inkscape -f $< -D -w 400 -e $(SITE_CHAP_IMAGES_DIR)/f-$(shell basename $< .svg).png >/dev/null

# Convert all images
htmlimages: $(SITEIMAGES) $(SITE_CHAP_IMAGES_DIR)
	@cp images/f-w5-d1.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d1.png
	@cp images/f-w5-d2.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d2.png
	@cp images/f-w5-d3.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d3.png
	@cp images/f-w5-d4.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d4.png
	@cp images/f-w5-d5.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d5.png
	@cp images/f-w5-d6.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d6.png
	@cp images/f-w5-d7.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d7.png
	@cp images/f-w5-d8.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d8.png
	@cp images/f-w5-d9.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d9.png
	@cp images/f-w5-d10.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d10.png
	@cp images/f-w5-d11.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d11.png
	@cp images/f-w5-d12.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d12.png
	@cp images/f-w5-d13.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d13.png
	@cp images/f-w5-d14.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d14.png
	@cp images/f-w5-d15.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d15.png
	@cp images/f-w5-d16.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d16.png
	@cp images/f-w5-d17.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d17.png
	@cp images/f-w5-d18.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d18.png
	@cp images/f-w5-d19.png $(SITE_CHAP_IMAGES_DIR)/f-w5-d19.png
	@cp images/f-af7-d1.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d1.png
	@cp images/f-af7-d2.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d2.png
	@cp images/f-af7-d3.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d3.png
	@cp images/f-af7-d4.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d4.png
	@cp images/f-af7-d5.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d5.png
	@cp images/f-af7-d6.png $(SITE_CHAP_IMAGES_DIR)/f-af7-d6.png
	@cp images/f-af5-d1.png $(SITE_CHAP_IMAGES_DIR)/f-af5-d1.png
	@cp images/f-af5-d2.png $(SITE_CHAP_IMAGES_DIR)/f-af5-d2.png
	@cp images/f-af5-d3.png $(SITE_CHAP_IMAGES_DIR)/f-af5-d3.png
	@cp html/images/* $(SITE_IMAGES_DIR)/
		
# Make directories
$(SITE_DIR):
	@mkdir -p $(SITE_DIR)

$(SITE_STYLE_DIR):
	@mkdir -p $(SITE_STYLE_DIR)

$(SITE_IMAGES_DIR):
	@mkdir -p $(SITE_IMAGES_DIR)

$(SITE_CHAP_IMAGES_DIR):
	@mkdir -p $(SITE_CHAP_IMAGES_DIR)

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

$(BUILD_DIR_IMAGES):
	@mkdir -p $(BUILD_DIR_IMAGES)

#
# From Chris Monson's LaTeX Makefile
#

SED		?= sed
TPUT	?= tput

tput	= $(shell $(TPUT) $1)

black	:= $(call tput,setaf 0)
red	:= $(call tput,setaf 1)
green	:= $(call tput,setaf 2)
yellow	:= $(call tput,setaf 3)
blue	:= $(call tput,setaf 4)
magenta	:= $(call tput,setaf 5)
cyan	:= $(call tput,setaf 6)
white	:= $(call tput,setaf 7)
bold	:= $(call tput,bold)
uline	:= $(call tput,smul)
reset	:= $(call tput,sgr0)

#
# User-settable definitions
#
LATEX_COLOR_WARNING	?= magenta
LATEX_COLOR_ERROR	?= red
LATEX_COLOR_INFO	?= green
LATEX_COLOR_UNDERFULL	?= magenta
LATEX_COLOR_OVERFULL	?= red bold
LATEX_COLOR_PAGES	?= bold
LATEX_COLOR_BUILD	?= blue
LATEX_COLOR_GRAPHIC	?= yellow
LATEX_COLOR_DEP		?= green
LATEX_COLOR_SUCCESS	?= green bold
LATEX_COLOR_FAILURE	?= red bold

# Gets the real color from a simple textual definition like those above
# $(call get-color,ALL_CAPS_COLOR_NAME)
# e.g., $(call get-color,WARNING)
get-color	= $(subst $(space),,$(foreach c,$(LATEX_COLOR_$1),$($c)))

#
# STANDARD COLORS
#
C_WARNING	:= $(call get-color,WARNING)
C_ERROR		:= $(call get-color,ERROR)
C_INFO		:= $(call get-color,INFO)
C_UNDERFULL	:= $(call get-color,UNDERFULL)
C_OVERFULL	:= $(call get-color,OVERFULL)
C_PAGES		:= $(call get-color,PAGES)
C_BUILD		:= $(call get-color,BUILD)
C_GRAPHIC	:= $(call get-color,GRAPHIC)
C_DEP		:= $(call get-color,DEP)
C_SUCCESS	:= $(call get-color,SUCCESS)
C_FAILURE	:= $(call get-color,FAILURE)
C_RESET		:= $(reset)



color_tex	:= \
	@$(SED) \
	-e '$${' \
	-e '  /^$$/!{' \
	-e '    H' \
	-e '    s/.*//' \
	-e '  }' \
	-e '}' \
	-e '/^$$/!{' \
	-e '  H' \
	-e '  d' \
	-e '}' \
	-e '/^$$/{' \
	-e '  x' \
	-e '  s/^\n//' \
	-e '  /Output written/{' \
	-e '    s/.*(\([^)]\{1,\}\)).*/Success!  Wrote \1/' \
	-e '    s/[[:digit:]]\{1,\}/$(C_PAGES)&$(C_RESET)/g' \
	-e '    s/Success!/$(C_SUCCESS)&$(C_RESET)/g' \
	-e '    b end' \
	-e '  }' \
	-e '  /! *LaTeX Error:.*/{' \
	-e '    s/.*\(! *LaTeX Error:.*\)/$(C_ERROR)\1$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	-e '  /.*Warning: Marginpar on page [0-9]\+ moved\./{' \
	-e '    s//$(C_RESET)&$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	-e '  /.*Warning: Reference .*/{' \
	-e '    s//$(C_ERROR)&$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	-e '  /.*Warning:.*/{' \
	-e '    s//$(C_WARNING)&$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	-e '  /Underfull.*/{' \
	-e '    s/.*\(Underfull.*\)/$(C_UNDERFULL)\1$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	-e '  /Overfull.*/{' \
	-e '    s/.*\(Overfull.*\)/$(C_OVERFULL)\1$(C_RESET)/' \
	-e '    b end' \
	-e '  }' \
	$(if $(VERBOSE),,-e '  d') \
	-e '  :end' \
	-e '  G' \
	-e '}' \


